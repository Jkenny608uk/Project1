---
- hosts: localhost
  connection: local
  become: true
  become_method: sudo
  roles:
    - {
        role: basho-labs/riak_testing,
        riak_node_name: "riak@127.0.0.1"
      }
    - {
        role: basho-labs/client_smoke_tests,
        #ct_test_libs: ['php'] #'php','go', 'ruby', 'nodejs', 'java'
      }
  vars:
    # the vars section is used to pick the settings you want for your local environment
    # see roles/{role_name}/defaults/main.yml for settings you can override

    # GH Personal access token is needed to hit the GH API, see https://github.com/settings/tokens
    #ct_github_token: a_valid_token

    # Uncomment following line to use alternate package. Options include URL to RPM or DEB, riak-ts, or a specific version from packagecloud.
    riak_package: riak-ts

    riak_shell_group: 'riak-ts'
    ct_cmd: cmdts

    #riak_testing_role_dev: true

    riak_search:  'on'
    riak_backend: 'leveldb'
    riak_pb_bind_ip: 127.0.0.1
    riak_anti_entropy: 'passive'

    # setup Riak environment (bucket-types, users, sources, grants, conf)
    riak_bucket_types:
      #- { name: bitcask, props: '{"props":{"backend":"bitcask_backend"}}' }
      - { name: counters, props: '{"props":{"datatype":"counter"}}' }
      - { name: hlls, props: '{"props":{"datatype":"hll"}}' }
      - { name: leveldb_type, props: '' }
      - { name: maps, props: '{"props":{"datatype":"map"}}' }
      #- { name: memory_type, props: '{"props":{"backend":"mem_backend"}}' }
      - { name: mr, props: '' }
      - { name: no_siblings, props: '{"props":{"allow_mult":"false"}}' }
      - { name: other_counters, props: '{"props":{"datatype":"counter"}}' }
      - { name: plain, props: '' }
      - { name: search_type, props: '' }
      - { name: sets, props: '{"props":{"datatype":"set"}}' }
      - { name: write_once, props: '{"props":{"write_once":true}}' }
      - { name: yokozuna, props: '' }

      # PHP Testing Buckets
      - { name: phptest_counters,  props: '{"props":{"datatype":"counter"}}' }
      - { name: phptest_leveldb, props: '' }
      - { name: phptest_maps, props: '{"props":{"datatype":"map"}}' }
      - { name: phptest_search, props: '' }
      - { name: phptest_sets, props: '{"props":{"datatype":"set"}}' }

      # TS
      - { name: GeoCheckin, props: '{"props": {"n_val": 3, "table_def": "CREATE TABLE GeoCheckin (geohash varchar not null, user varchar not null, time timestamp not null, weather varchar not null, temperature double, PRIMARY KEY((geohash, user, quantum(time, 15, m)), geohash, user, time))"}}' }
      - { name: GeoCheckin_Wide, props: '{"props": {"n_val": 3, "table_def": "CREATE TABLE GeoCheckin_Wide (geohash varchar not null, user varchar not null, time timestamp not null, weather varchar not null, temperature double, uv_index sint64, observed boolean not null, sensor_data blob, PRIMARY KEY((geohash, user, quantum(time, 15, m)), geohash, user, time))"}}' }
      - { name: GeoCheckin_Wide_1_5, props: '{"props": {"n_val": 3, "table_def": "CREATE TABLE GeoCheckin_Wide_1_5 (geohash varchar not null, user varchar not null, time timestamp not null, weather varchar not null, temperature double, uv_index sint64, observed boolean not null, sensor_data blob, PRIMARY KEY((geohash, user, quantum(time, 15, m)), geohash, user, time))"}}' }
      - { name: WeatherByRegion, props: '{"props": {"n_val": 3, "table_def": "CREATE TABLE WeatherByRegion (region varchar not null, state varchar not null, time timestamp not null, weather varchar not null, temperature double, uv_index sint64, observed boolean not null, PRIMARY KEY((region, state, quantum(time, 15, m)), region, state, time))"}}' }
      - { name: BLURB, props: '{"props": {"n_val": 3, "table_def": "CREATE TABLE BLURB (blurb blob not null, time timestamp not null, PRIMARY KEY((blurb, quantum(time, 15, 'm')), blurb, time))"}}' }
